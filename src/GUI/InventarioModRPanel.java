/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import java.awt.EventQueue;
import java.beans.Beans;
import javax.persistence.RollbackException;
import javax.swing.JFrame;
import javax.swing.JPanel;
//
import controladores.Ingredientes;
import controladores.Productos;
import controladores.Recetas;
import datos.Ingrediente;
import datos.Receta;
import java.util.ArrayList;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.table.DefaultTableModel;
import oraclegeneral.Conexion;

/**
 *
 * @author Hector
 */
public class InventarioModRPanel extends JPanel {
    
    
    private List<Productos> prod = new ArrayList<Productos>();
    private List<Ingrediente> ingrediente = new ArrayList<Ingrediente>();
    private List<Receta> cant = new ArrayList<Receta>();
    DefaultTableModel mod;
    DefaultTableModel cantidades_reg;
    
    
    public InventarioModRPanel() {
        initComponents();
        cargarProductos();
        if (!Beans.isDesignTime()) {
            entityManager.getTransaction().begin();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        entityManager = java.beans.Beans.isDesignTime() ? null : javax.persistence.Persistence.createEntityManagerFactory("jdbc:oracle:thin:@localhost:1521:XEPU").createEntityManager();
        query = java.beans.Beans.isDesignTime() ? null : entityManager.createQuery("SELECT i FROM Ingredientes i");
        list = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : org.jdesktop.observablecollections.ObservableCollections.observableList(query.getResultList());
        saveButton = new javax.swing.JButton();
        refreshButton = new javax.swing.JButton();
        newButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        ingredienteIdLabel = new javax.swing.JLabel();
        nombreLabel = new javax.swing.JLabel();
        cantDispLabel = new javax.swing.JLabel();
        ingredienteIdField = new javax.swing.JTextField();
        cantDispField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        lstProductos = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblRecetas = new javax.swing.JTable();
        btnAceptar = new javax.swing.JButton();
        lstProductos1 = new javax.swing.JComboBox<>();
        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();

        FormListener formListener = new FormListener();

        setLayout(null);

        saveButton.setText("Guardar");
        saveButton.addActionListener(formListener);
        add(saveButton);
        saveButton.setBounds(430, 330, 71, 23);

        refreshButton.setText("Update");
        refreshButton.addActionListener(formListener);
        add(refreshButton);
        refreshButton.setBounds(360, 330, 71, 23);

        newButton.setText("Nuevo");
        newButton.addActionListener(formListener);
        add(newButton);
        newButton.setBounds(200, 330, 71, 23);

        deleteButton.setText("Borrar");
        deleteButton.addActionListener(formListener);
        add(deleteButton);
        deleteButton.setBounds(280, 330, 71, 23);

        ingredienteIdLabel.setText("Ingrediente Id:");
        add(ingredienteIdLabel);
        ingredienteIdLabel.setBounds(10, 242, 73, 14);

        nombreLabel.setText("Ingrediente:");
        add(nombreLabel);
        nombreLabel.setBounds(20, 270, 60, 14);

        cantDispLabel.setText("Cantidad:");
        add(cantDispLabel);
        cantDispLabel.setBounds(310, 250, 47, 14);
        add(ingredienteIdField);
        ingredienteIdField.setBounds(90, 240, 54, 20);
        add(cantDispField);
        cantDispField.setBounds(310, 270, 60, 20);

        jLabel1.setText("Producto");
        add(jLabel1);
        jLabel1.setBounds(70, 10, 60, 14);

        lstProductos.addActionListener(formListener);
        add(lstProductos);
        lstProductos.setBounds(120, 10, 210, 20);

        jLabel2.setText("Receta");
        add(jLabel2);
        jLabel2.setBounds(50, 50, 60, 14);

        tblRecetas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Ingrediente", "Cantidad"
            }
        ));
        jScrollPane1.setViewportView(tblRecetas);

        add(jScrollPane1);
        jScrollPane1.setBounds(50, 70, 460, 150);

        btnAceptar.setText("Aceptar");
        btnAceptar.addActionListener(formListener);
        add(btnAceptar);
        btnAceptar.setBounds(390, 10, 71, 23);

        lstProductos1.addActionListener(formListener);
        add(lstProductos1);
        lstProductos1.setBounds(90, 270, 210, 20);

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        add(jComboBox1);
        jComboBox1.setBounds(380, 270, 56, 20);

        jLabel3.setText("Medida");
        add(jLabel3);
        jLabel3.setBounds(380, 250, 34, 14);
    }

    // Code for dispatching events from components to event handlers.

    private class FormListener implements java.awt.event.ActionListener {
        FormListener() {}
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            if (evt.getSource() == saveButton) {
                InventarioModRPanel.this.saveButtonActionPerformed(evt);
            }
            else if (evt.getSource() == refreshButton) {
                InventarioModRPanel.this.refreshButtonActionPerformed(evt);
            }
            else if (evt.getSource() == newButton) {
                InventarioModRPanel.this.newButtonActionPerformed(evt);
            }
            else if (evt.getSource() == deleteButton) {
                InventarioModRPanel.this.deleteButtonActionPerformed(evt);
            }
            else if (evt.getSource() == lstProductos) {
                InventarioModRPanel.this.lstProductosActionPerformed(evt);
            }
            else if (evt.getSource() == btnAceptar) {
                InventarioModRPanel.this.btnAceptarActionPerformed(evt);
            }
            else if (evt.getSource() == lstProductos1) {
                InventarioModRPanel.this.lstProductos1ActionPerformed(evt);
            }
        }
    }// </editor-fold>//GEN-END:initComponents

    
    @SuppressWarnings("unchecked")
    private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshButtonActionPerformed
        entityManager.getTransaction().rollback();
        entityManager.getTransaction().begin();
        java.util.Collection data = query.getResultList();
        for (Object entity : data) {
            entityManager.refresh(entity);
        }
        list.clear();
        list.addAll(data);
    }//GEN-LAST:event_refreshButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        int[] selected = tblRecetas.getSelectedRows();
        List<GUI.Ingredientes> toRemove = new ArrayList<GUI.Ingredientes>(selected.length);
        for (int idx = 0; idx < selected.length; idx++) {
            GUI.Ingredientes i = list.get(tblRecetas.convertRowIndexToModel(selected[idx]));
            toRemove.add(i);
            entityManager.remove(i);
        }
        list.removeAll(toRemove);
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void newButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newButtonActionPerformed
        GUI.Ingredientes i = new GUI.Ingredientes();
        entityManager.persist(i);
        list.add(i);
        int row = list.size() - 1;
        tblRecetas.setRowSelectionInterval(row, row);
        tblRecetas.scrollRectToVisible(tblRecetas.getCellRect(row, 0, true));
    }//GEN-LAST:event_newButtonActionPerformed
    
    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        try {
            entityManager.getTransaction().commit();
            entityManager.getTransaction().begin();
        } catch (RollbackException rex) {
            rex.printStackTrace();
            entityManager.getTransaction().begin();
            List<GUI.Ingredientes> merged = new ArrayList<GUI.Ingredientes>(list.size());
            for (GUI.Ingredientes i : list) {
                merged.add(entityManager.merge(i));
            }
            list.clear();
            list.addAll(merged);
        }
    }//GEN-LAST:event_saveButtonActionPerformed

    private void lstProductosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lstProductosActionPerformed

    }//GEN-LAST:event_lstProductosActionPerformed

    private void btnAceptarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAceptarActionPerformed

        ingrediente = (List<Ingrediente>) Ingredientes.select(Conexion.getDBConexion(), "select i.nombre from ingredientes i inner join recetas r"
            + " on r.ingrediente_id = i.ingrediente_id inner join productos p "
            + "on p.producto_id = r.producto_id where p.nombre like '"+ lstProductos.getSelectedItem().toString() +"'", Ingrediente.class);
        cant = (List<Receta>) Recetas.select(Conexion.getDBConexion(), "select r.cant from ingredientes i inner join recetas r"
            + " on r.ingrediente_id = i.ingrediente_id inner join productos p "
            + "on p.producto_id = r.producto_id where p.nombre like '"+ lstProductos.getSelectedItem().toString() +"'", Receta.class);

        tblRecetas.setDefaultEditor(Object.class, null);
        cantidades_reg = (DefaultTableModel)this.tblRecetas.getModel();
        int largoI = ingrediente.size();
        int largoC = cant.size();
        //Lipia la tabla
        int filas = tblRecetas.getRowCount();
        for(int l=0;l<filas;l++){
            cantidades_reg.removeRow(0);
        }
        for(int l=0;l<largoI;l++){
            Ingrediente in = (Ingrediente) ingrediente.get(l);
            cantidades_reg.addRow(new Object[l]);
            cantidades_reg.setValueAt(in.getNombre(),l,0);
        }
        for(int l=0;l<largoC;l++){
            Receta in = (Receta) cant.get(l);
            cantidades_reg.setValueAt(in.getCant(),l,1);
        }

    }//GEN-LAST:event_btnAceptarActionPerformed

    private void lstProductos1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lstProductos1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_lstProductos1ActionPerformed

    public void cargarProductos(){
        DefaultComboBoxModel mdlCombo= new DefaultComboBoxModel();
        lstProductos.setModel(mdlCombo);
        prod = Productos.productosRecetas();
        for(int i=0;i<prod.size();i++){
            mdlCombo.addElement(prod.get(i));
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAceptar;
    private javax.swing.JTextField cantDispField;
    private javax.swing.JLabel cantDispLabel;
    private javax.swing.JButton deleteButton;
    private javax.persistence.EntityManager entityManager;
    private javax.swing.JTextField ingredienteIdField;
    private javax.swing.JLabel ingredienteIdLabel;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private java.util.List<GUI.Ingredientes> list;
    private javax.swing.JComboBox<String> lstProductos;
    private javax.swing.JComboBox<String> lstProductos1;
    private javax.swing.JButton newButton;
    private javax.swing.JLabel nombreLabel;
    private javax.persistence.Query query;
    private javax.swing.JButton refreshButton;
    private javax.swing.JButton saveButton;
    private javax.swing.JTable tblRecetas;
    // End of variables declaration//GEN-END:variables
    public static void main(String[] args) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(InventarioModRPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(InventarioModRPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(InventarioModRPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InventarioModRPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        EventQueue.invokeLater(new Runnable() {
            public void run() {
                JFrame frame = new JFrame();
                frame.setContentPane(new InventarioModRPanel());
                frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
                frame.pack();
                frame.setVisible(true);
            }
        });
    }
    
}
